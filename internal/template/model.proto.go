package template

// Model used as a variable because it cannot load template file after packed, params still can pass file
const ModelProto = NotEditMark + `
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "global.proto";

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..
package {{.ProjectName}}.service.v1;

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

// {{.ModelStructName}} {{.StructComment}}
message {{.ModelStructName}} {
	{{$seq:=0}}
    {{range .Fields}}
	{{$seq = Add $seq 1}}
    {{if .MultilineComment -}}
	/*
{{.ColumnComment}}
    */
	{{end -}}
    {{.Type}} {{.Name}}` + " = {{$seq}} [{{.ProtoTags}}]; " +
	"{{if not .MultilineComment}}{{if .ColumnComment}}// {{.ColumnComment}}{{end}}{{end}}" +
	`{{end}}
}

message {{.ModelStructName}}ListReq {
    {{.ModelStructName}} filter = 1 [(gogoproto.moretags) = 'form:"filter" validate:"required"', (gogoproto.jsontag) = 'filter'];
    Page page = 2 [(gogoproto.moretags) = 'form:"page"', (gogoproto.jsontag) = 'page']; 
}

message {{.ModelStructName}}ListRsp {
    repeated {{.ModelStructName}} list = 1 [(gogoproto.jsontag) = 'list'];
    int64 total = 2 [(gogoproto.jsontag) = 'total'];     
}

message {{.ModelStructName}}Req{
    {{.ModelStructName}} {{.QueryStructName}} = 1 [(gogoproto.moretags) = 'form:"{{.QueryStructName}}" validate:"required"', (gogoproto.jsontag) = '{{.QueryStructName}}'];
}

message {{.ModelStructName}}Rsp{
    {{.ModelStructName}} {{.QueryStructName}} = 1 [(gogoproto.jsontag) = '{{.QueryStructName}}'];
}

message {{.ModelStructName}}DelReq{
    repeated string id = 1 [(gogoproto.moretags) = 'form:"id" validate:"required"', (gogoproto.jsontag) = 'id'];
}


//
//  请将以下内容复制到主proto文件的service对象里
//
//  ///////////////
//  ////{{.ModelStructName}} api////
//  /////////////// 
//
//  //{{.ModelStructName}} list
//  rpc {{.ModelStructName}}List({{.ModelStructName}}ListReq) returns ({{.ModelStructName}}ListRsp) {
//    option (google.api.http) = {
//      post: "/portal_backend/{{.QueryStructName}}/list"
//      body: "*"
//    };
//  };
//
//  //{{.ModelStructName}} add
//  rpc {{.ModelStructName}}Add({{.ModelStructName}}Req) returns ({{.ModelStructName}}Rsp) {
//    option (google.api.http) = {
//      post: "/portal_backend/{{.QueryStructName}}/add"
//      body: "*"
//    };
//  };
//
//  //{{.ModelStructName}} update
//  rpc {{.ModelStructName}}Update({{.ModelStructName}}Req) returns ({{.ModelStructName}}Rsp) {
//    option (google.api.http) = {
//      post: "/portal_backend/{{.QueryStructName}}/update"
//      body: "*"
//    };
//  };
//
//  //{{.ModelStructName}} delete
//  rpc {{.ModelStructName}}Del({{.ModelStructName}}DelReq) returns (.google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/portal_backend/{{.QueryStructName}}/del"
//      body: "*"
//    };
//  }; 
`

const ModelService = `
package service

import (
	"context"
	"errors"
	pb "{{.ProjectName}}/api"
	"{{.ProjectName}}/internal/dao/query"
	"{{.ProjectName}}/internal/model"

	"github.com/golang/protobuf/ptypes/empty"
	"google.golang.org/protobuf/types/known/emptypb"
	xtime "gitlab.datahunter.cn/common/kratos/pkg/time"
	bm "gitlab.datahunter.cn/common/kratos/pkg/net/http/blademaster"
	"gitlab.datahunter.cn/common/kratos/pkg/net/metadata"
)

//用于引入包
var (
	_ bm.CORSConfig
	_ xtime.Duration
	_ metadata.MD
)

func (s *Service) {{.ModelStructName}}List(ctx context.Context, req *pb.{{.ModelStructName}}ListReq) (reply *pb.{{.ModelStructName}}ListRsp, err error) {
	page := &Page{req.Page}
	qdo := query.{{.ModelStructName}}.WithContext(ctx)
	{{if ExistsField "DeletedTime" .Fields}}
	qdo = qdo.Where(query.{{.ModelStructName}}.DeletedTime.Eq(0))
	{{end}}	
	list, total, err := qdo.FindByPage(page.Offset(), page.Limit())
	if err != nil {
		return nil, err
	}
	reply = &pb.{{.ModelStructName}}ListRsp{
		List:  model.{{.ModelStructName}}s(list).ToPb(),
		Total: total,
	}
	return
}

func (s *Service) {{.ModelStructName}}Add(ctx context.Context, req *pb.{{.ModelStructName}}Req) (reply *pb.{{.ModelStructName}}Rsp, err error) {
	m := model.{{.ModelStructName}}{}

	if err = query.{{.ModelStructName}}.WithContext(ctx).Create(m.ToModel(req.{{.ModelStructName}}).BeforeCreate(ctx)); err != nil {
		return nil, err
	}

	reply = &pb.{{.ModelStructName}}Rsp{
		{{.ModelStructName}}: m.ToPb(),
	}
	return
}

func (s *Service) {{.ModelStructName}}Update(ctx context.Context, req *pb.{{.ModelStructName}}Req) (reply *pb.{{.ModelStructName}}Rsp, err error) {
	if req.{{.ModelStructName}}.ID == "" {
		return nil, errors.New("id is required")
	}
	m := model.{{.ModelStructName}}{}
	if err = query.{{.ModelStructName}}.WithContext(ctx).Save(m.ToModel(req.{{.ModelStructName}}).BeforeUpdate(ctx)); err != nil {
		return nil, err
	}

	reply = &pb.{{.ModelStructName}}Rsp{
		{{.ModelStructName}}: m.ToPb(),
	}
	return
}

func (s *Service) {{.ModelStructName}}Del(ctx context.Context, req *pb.{{.ModelStructName}}DelReq) (reply *empty.Empty, err error) {
	{{if ExistsField "DeletedTime" .Fields}}
	columns := map[string]interface{}{
		"deleted_time": xtime.Millisecond(),
	}

	if c, ok := ctx.(*bm.Context); ok {
		if id, ok := c.Keys[metadata.UserID]; ok {
			{{if ExistsField "DeletedID" .Fields}}
			columns["deleted_id"] = id
			{{end}}
		}
		if name, ok := c.Keys[metadata.UserName]; ok {
			{{if ExistsField "DeletedName" .Fields}}
			columns["deleted_name"] = name
			{{end}}
		}
	}	
	if _, err = query.{{.ModelStructName}}.WithContext(ctx).Where(query.{{.ModelStructName}}.ID.In(req.Id...)).UpdateColumns(columns); err != nil {
		return nil, err
	}
	{{else}}
	if _, err = query.{{.ModelStructName}}.Where(query.{{.ModelStructName}}.ID.In(req.Id...)).Delete(); err != nil {
		return nil, err
	}
	{{end}}
	return &emptypb.Empty{}, nil
}

`
